[package]
name = "tiny-os"
version = "0.1.0"
edition = "2018"
authors = ["Cedric Chee <cedric+gh@invictusbyte.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
bootloader = { version = "0.9.8", features = ["map_physical_memory"] }
volatile = "0.2.6"
spin = "0.5.2"
x86_64 = "0.14.2"
uart_16550 = "0.2.0"
pic8259 = "0.10.1"
pc-keyboard = "0.5.0"
linked_list_allocator = "0.9.0"

[dependencies.lazy_static]
version = "1.0"
features = ["spin_no_std"] # we need this feature since we donâ€™t link the standard library.

# A simple implementation of queue could be a mutex-protected `VecDeque`.
# However, using mutexes in interrupt handlers is not a good idea since it can
# easily lead to deadlocks.
# 
# To prevent these problems, we need a queue implementation that does not
# require mutexes or allocations for its `push` operation. Such queues can be
# implemented by using lock-free atomic operations for pushing and popping
# elements.
# 
# Implementing such a queue in a correct and efficient way is very difficult, so
# we recommend to stick to existing, well-tested implementations. One popular
# Rust project that implements various mutex-free types for concurrent
# programming is `crossbeam`. It provides a type named `ArrayQueue` that is
# exactly what we need in this case. And we're lucky: The type is fully
# compatible to `no_std` crates with allocation support.
[dependencies.crossbeam-queue]
version = "0.2.1"
default-features = false
features = ["alloc"]

# This crate provides a set of synchronized initialization primitives, which are
# primarily useful for lazy and one-time initialization of static variables.
[dependencies.conquer-once]
version = "0.2.0"
default-features = false

# This crate contains the `Stream` type.
# 
# We disable the default features to make the crate `no_std` compatible and
# enable the `alloc` feature to make its allocation-based types available.
# 
# Note that we could also add a dependency on the main `futures` crate, which
# re-exports the `futures-util` crate, but this would result in a larger number
# of dependencies and longer compile times.
[dependencies.futures-util]
version = "0.3.4"
default-features = false
features = ["alloc"]

# Enable QEMU special `isa-debug-exit` device, which provides an easy way to
# exit QEMU from the guest system.
# 
# The `bootimage runner` appends the test-args to the default QEMU command for
# all test executables. For a normal `cargo run`, the arguments are ignored.
# 
# Together with the device name (`isa-debug-exit`), we pass the two parameters
# `iobase` and `iosize` that specify the I/O port through which the device can
# be reached from our kernel.
[package.metadata.bootimage]
test-args = [
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04",
    "-serial", "stdio",
    "-display", "none"
]
test-success-exit-code = 33 # maps a specified exit code to the exit code `0`.  (0x10 << 1) | 1
test-timeout = 30 # (in seconds)

[[test]]
name = "should_panic"
harness = false

[[test]]
name = "stack_overflow"
harness = false